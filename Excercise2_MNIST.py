import tensorflow as tfimport numpy as npimport sklearn.metrics as met#Load the datamnist = tf.keras.datasets.mnist#split the data(X_train, ytrain), (X_test, y_test) = mnist.load_data()#normalize the dataX_train = X_train/255 #8 bit dataX_test = X_test/255#Create a modelmodel = tf.keras.models.Sequential()model.add(tf.keras.layers.Flatten(input_shape=(28,28)))model.add(tf.keras.layers.Dense(128))model.add(tf.keras.layers.Dropout(0.1))model.add(tf.keras.layers.Dense(10, activation="softmax"))#Compile the modelmodel.compile(optimizer='adam',               loss='sparse_categorical_crossentropy',              metrics=['accuracy'])#fit the modelnn = model.fit(x=X_train, y=ytrain, epochs=15, validation_data=(X_test, y_test))#plot the lossesimport matplotlib.pyplot as pltplt.plot(nn.history['loss'], label='loss')plt.plot(nn.history['val_loss'], label='val_loss')plt.legend()          #evaluate the modelprint(model.evaluate(X_test, y_test))#predict the test set valuesy_pred = model.predict(X_test).argmax(axis=1)#print the confusion matrixcm = met.confusion_matrix(y_test, y_pred)print(cm)#plot the corellation mapimport seaborn as snssns.heatmap(cm)#show some misclassified samplesmis_idx = np.where(y_test != y_pred)[0]plt.imshow(X_test[mis_idx[0]], cmap='gray')plt.title("Y_test %s Y_Pred %s" % (y_test[mis_idx[0]], y_pred[mis_idx[0]]))plt.imshow(X_test[mis_idx[-1]], cmap='gray')plt.title("Y_test %s Y_Pred %s" % (y_test[mis_idx[-1]], y_pred[mis_idx[-1]]))index_from_middle = int(np.round(len(mis_idx)/2))plt.imshow(X_test[index_from_middle], cmap='gray')plt.title("Y_test %s Y_Pred %s" % (y_test[mis_idx[index_from_middle]],                                    y_pred[mis_idx[index_from_middle]]))